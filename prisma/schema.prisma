generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model dojos {
  id    Int     @id @default(autoincrement()) @db.UnsignedTinyInt
  name  String  @db.VarChar(100)
  users users[]
}

model events {
  id                Int       @id @default(autoincrement()) @db.UnsignedSmallInt
  eventdate         DateTime  @db.Date
  eventcolor        String?   @db.VarChar(100)
  description       String    @db.VarChar(100)
  override          Boolean?  @default(false)
  createdAt         DateTime  @default(now()) @db.DateTime(0)
  updatedAt         DateTime? @updatedAt @db.DateTime(0)
  repeating         Boolean?  @default(false)
  eventtype         String    @default("training") @db.VarChar(100)
  repetitiontype    String?   @db.VarChar(100)
  eventdatetimefrom DateTime? @db.DateTime(0)
  eventdatetimeto   DateTime? @db.DateTime(0)
}

model ranks {
  id          Int       @id @default(autoincrement()) @db.UnsignedSmallInt
  rank        Int       @db.UnsignedTinyInt
  category    String    @db.VarChar(10)
  color       String    @db.VarChar(10)
  user        Int       @db.UnsignedSmallInt
  graduatedon DateTime  @db.Date
  createdAt   DateTime  @default(now()) @db.DateTime(0)
  updatedAt   DateTime? @default(now()) @updatedAt @db.DateTime(0)
  users       users     @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ranks_users_FK")

  @@index([user], map: "ranks_users_FK")
}

model refreshTokens {
  id        Int       @id @default(autoincrement())
  token     String    @db.VarChar(255)
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime? @default(now()) @updatedAt @db.DateTime(0)

  @@index([token], map: "refreshTokens_token_IDX")
}

model users {
  id          Int       @id @default(autoincrement()) @db.UnsignedSmallInt
  nickname    String?   @unique(map: "nickname") @db.VarChar(100)
  name        String    @unique(map: "name") @db.VarChar(100)
  email       String?   @unique(map: "email") @db.VarChar(100)
  dojo        Int       @default(1) @db.UnsignedTinyInt
  password    String?   @db.VarChar(255)
  createdAt   DateTime  @default(now()) @db.DateTime(0)
  activated   Boolean   @default(false)
  birth       DateTime? @db.Date
  updatedAt   DateTime? @updatedAt @db.DateTime(0)
  resetcode   String?   @db.VarChar(6)
  ranks       ranks[]
  dojos       dojos     @relation(fields: [dojo], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_ibfk_1")

  @@index([dojo], map: "user_FK")
  @@index([nickname], map: "user_nickname_IDX")
}
