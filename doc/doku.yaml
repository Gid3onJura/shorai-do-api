openapi: 3.0.3

info:
  title: Shorai-Do-Api
  description: Api interface for [SDKM-Wiki Dev](https://shorai-do-kempo-dev.netlify.app/) or [SDKM-Wiki Live](https://shorai-do-kempo-app.netlify.app)
  version: 1.0.0

servers:
  - url: http://localhost:8080

tags:
  - name: auth
    description: Everything about authentication
  - name: user
    description: Access to user interaction
  - name: exam
    description: Access to exam interaction

paths:
  # auth
  /login:
    post:
      tags:
        - auth
      summary: Authentication
      description: User-Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "403":
          description: Forbidden
        "500":
          description: Internal Error
  /refreshtoken:
    post:
      tags:
        - auth
      summary: Refresh Token
      description: create refreshed auth-token
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequest"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshTokenResponse"
        "403":
          description: Forbidden
        "500":
          description: Internal Error
  /logout:
    delete:
      tags:
        - auth
      summary: Logout
      description: invalidate access token
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequest"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshTokenResponse"
        "403":
          description: Forbidden
        "500":
          description: Internal Error

  # user
  /user:
    get:
      tags:
        - user
      summary: get all users
      description: get list of users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Error
    post:
      tags:
        - user
      summary: register user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUserRequest"
        required: true
      responses:
        "201":
          description: Success
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterUser400Response"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Error

  /user/:id:
    get:
      tags:
        - user
      summary: get user by id
      description: get user by id
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: id of the user to get
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserByIdResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Error
    delete:
      tags:
        - user
      summary: delete user by id
      description: delete user by id
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: id of the user to delete
      responses:
        "200":
          description: Success
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Error

  # exam
  /exam:
    post:
      tags:
        - exam
      summary: add exam to user
      description: set belt color and rank
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddExamRequest"
        required: true
      responses:
        "201":
          description: Success
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestValidation"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Error
    patch:
      tags:
        - exam
      summary: update exam
      description: update exam
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateExamRequest"
        required: true
      responses:
        "200":
          description: Success
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestValidation"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Error

  /exam/:id:
    delete:
      tags:
        - exam
      summary: delete exam by id
      description: delete exam from user by exam id
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: id of the exam to delete
      responses:
        "200":
          description: Success
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Error

components:
  schemas:
    BadRequestValidation:
      type: object
      properties:
        error:
          type: string
          example: '"user" must be a number'
    LoginRequest:
      required:
        - nickname
        - password
      type: object
      properties:
        nickname:
          type: string
          example: testuser
        password:
          type: string
          example: 123456
    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI
    RefreshTokenRequest:
      required:
        - token
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIs
    RefreshTokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1
    UserResponse:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            example: 42
          name:
            type: string
            example: "kohai1"
          kyu:
            type: integer
            example: 4
          graduation_date:
            type: string
            example: "2023-08-04"
          birth:
            type: string
            example: "2023-08-04"
          active:
            type: boolean
            example: true
    UserByIdResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nickname:
          type: string
          example: Bob
        name:
          type: string
          example: Bob
        email:
          type: string
          example: test@web.de
        dojo:
          type: integer
          example: 1
        activated:
          type: boolean
          example: true
        birth:
          type: string
          example: "1992-04-03"
        rank:
          type: integer
          example: 3
        category:
          type: string
          example: kyu
        color:
          type: string
          example: green
        graduatedon:
          type: string
          example: "2023-04-03"
        exams:
          type: array
          items:
            $ref: "#/components/schemas/Exam"
    RegisterUserRequest:
      required:
        - nickname
        - password
      type: object
      properties:
        nickname:
          type: string
          example: admin
        email:
          type: string
          example: admin@web.de
        password:
          type: string
          example: 123456
        birth:
          type: string
          example: "1992-04-03"
    RegisterUser400Response:
      type: object
      properties:
        message:
          type: string
          example: "user already exists"
    AddExamRequest:
      required:
        - rank
        - category
        - color
        - user
        - graduatedon
      type: object
      properties:
        rank:
          type: integer
          example: 6
        category:
          type: string
          example: "kyu"
        color:
          type: string
          example: "white"
        user:
          type: integer
          example: 42
        graduatedon:
          type: string
          example: "1992-04-03"
    UpdateExamRequest:
      required:
        - rank
        - category
        - color
        - graduatedon
        - examid
      type: object
      properties:
        rank:
          type: integer
          example: 6
        category:
          type: string
          example: "kyu"
        color:
          type: string
          example: "white"
        graduatedon:
          type: string
          example: "1992-04-03"
        examid:
          type: integer
          example: 102
    Exam:
      type: object
      properties:
        id:
          type: integer
          example: 3
        rank:
          type: integer
          example: 2
        category:
          type: string
          example: "kyu"
        color:
          type: string
          example: "blue"
        user:
          type: integer
          example: 1
        graduatedon:
          type: string
          example: "2023-04-03"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    api_key:
      type: apiKey
      name: api-key
      in: header
